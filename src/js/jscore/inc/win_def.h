
#ifndef win_def_h_
#define win_def_h_
//#include <windows.h>


#include "quickjs-libc.h"
#include <atomic>
//extern HMODULE _jsc_hl;

//extern std::atomic<JSRuntime * (*)()> WIN_JS_NewRuntime;

extern std::atomic<JSRuntime * (*)()> WIN_JS_NewRuntime;
extern std::atomic<JSContext * (*)(JSRuntime *)> WIN_JS_NewContext;
extern std::atomic<void (*)(JSRuntime *rt, const char *info)> WIN_JS_SetRuntimeInfo;
extern std::atomic<void (*)(JSRuntime *rt, size_t limit)> WIN_JS_SetMemoryLimit;
extern std::atomic<void (*)(JSRuntime *rt, size_t gc_threshold)> WIN_JS_SetGCThreshold;
extern std::atomic<void (*)(JSRuntime *rt, size_t stack_size)> WIN_JS_SetMaxStackSize;
extern std::atomic<void (*)(JSRuntime *rt)> WIN_JS_UpdateStackTop;
extern std::atomic<JSRuntime *(*)(const JSMallocFunctions *mf, void *opaque)> WIN_JS_NewRuntime2;
extern std::atomic<void (*)(JSRuntime *rt)> WIN_JS_FreeRuntime;
extern std::atomic<void *(*)(JSRuntime *rt)> WIN_JS_GetRuntimeOpaque;
extern std::atomic<void (*)(JSRuntime *rt, void *opaque)> WIN_JS_SetRuntimeOpaque;
extern std::atomic<void (*)(JSRuntime *rt, JSValueConst val, JS_MarkFunc *mark_func)> WIN_JS_MarkValue;
extern std::atomic<void (*)(JSRuntime *rt)> WIN_JS_RunGC;
extern std::atomic<JS_BOOL (*)(JSRuntime *rt, JSValueConst obj)> WIN_JS_IsLiveObject;
extern std::atomic<JSContext *(*)(JSRuntime *rt)> WIN_JS_NewContext;
extern std::atomic<void (*)(JSContext *s)> WIN_JS_FreeContext;
extern std::atomic<JSContext *(*)(JSContext *ctx)> WIN_JS_DupContext;
extern std::atomic<void *(*)(JSContext *ctx)> WIN_JS_GetContextOpaque;
extern std::atomic<void (*)(JSContext *ctx, void *opaque)> WIN_JS_SetContextOpaque;
extern std::atomic<JSRuntime *(*)(JSContext *ctx)> WIN_JS_GetRuntime;
extern std::atomic<void (*)(JSContext *ctx, JSClassID class_id, JSValue obj)> WIN_JS_SetClassProto;
extern std::atomic<JSValue (*)(JSContext *ctx, JSClassID class_id)> WIN_JS_GetClassProto;
extern std::atomic<JSContext *(*)(JSRuntime *rt)> WIN_JS_NewContextRaw;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicBaseObjects;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicDate;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicEval;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicStringNormalize;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicRegExpCompiler;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicRegExp;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicJSON;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicProxy;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicMapSet;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicTypedArrays;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicPromise;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicBigInt;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicBigFloat;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicBigDecimal;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_AddIntrinsicOperators;
extern std::atomic<void (*)(JSContext *ctx, JS_BOOL enable)> WIN_JS_EnableBignumExt;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)> WIN_js_string_codePointRange;
extern std::atomic<void *(*)(JSRuntime *rt, size_t size)> WIN_js_malloc_rt;
extern std::atomic<void (*)(JSRuntime *rt, void *ptr)> WIN_js_free_rt;
extern std::atomic<void *(*)(JSRuntime *rt, void *ptr, size_t size)> WIN_js_realloc_rt;
extern std::atomic<size_t (*)(JSRuntime *rt, const void *ptr)> WIN_js_malloc_usable_size_rt;
extern std::atomic<void *(*)(JSRuntime *rt, size_t size)> WIN_js_mallocz_rt;
extern std::atomic<void *(*)(JSContext *ctx, size_t size)> WIN_js_malloc;
extern std::atomic<void (*)(JSContext *ctx, void *ptr)> WIN_js_free;
extern std::atomic<void *(*)(JSContext *ctx, void *ptr, size_t size)> WIN_js_realloc;
extern std::atomic<size_t (*)(JSContext *ctx, const void *ptr)> WIN_js_malloc_usable_size;
extern std::atomic<void *(*)(JSContext *ctx, void *ptr, size_t size, size_t *pslack)> WIN_js_realloc2;
extern std::atomic<void *(*)(JSContext *ctx, size_t size)> WIN_js_mallocz;
extern std::atomic<char *(*)(JSContext *ctx, const char *str)> WIN_js_strdup;
extern std::atomic<char *(*)(JSContext *ctx, const char *s, size_t n)> WIN_js_strndup;
extern std::atomic<void (*)(JSRuntime *rt, JSMemoryUsage *s)> WIN_JS_ComputeMemoryUsage;
extern std::atomic<void (*)(FILE *fp, const JSMemoryUsage *s, JSRuntime *rt)> WIN_JS_DumpMemoryUsage;
extern std::atomic<JSAtom (*)(JSContext *ctx, const char *str, size_t len)> WIN_JS_NewAtomLen;
extern std::atomic<JSAtom (*)(JSContext *ctx, const char *str)> WIN_JS_NewAtom;
extern std::atomic<JSAtom (*)(JSContext *ctx, uint32_t n)> WIN_JS_NewAtomUInt32;
extern std::atomic<JSAtom (*)(JSContext *ctx, JSAtom v)> WIN_JS_DupAtom;
extern std::atomic<void (*)(JSContext *ctx, JSAtom v)> WIN_JS_FreeAtom;
extern std::atomic<void (*)(JSRuntime *rt, JSAtom v)> WIN_JS_FreeAtomRT;
extern std::atomic<JSValue (*)(JSContext *ctx, JSAtom atom)> WIN_JS_AtomToValue;
extern std::atomic<JSValue (*)(JSContext *ctx, JSAtom atom)> WIN_JS_AtomToString;
extern std::atomic<const char *(*)(JSContext *ctx, JSAtom atom)> WIN_JS_AtomToCString;
extern std::atomic<JSAtom (*)(JSContext *ctx, JSValueConst val)> WIN_JS_ValueToAtom;
extern std::atomic<JSClassID (*)(JSClassID *pclass_id)> WIN_JS_NewClassID;
extern std::atomic<int (*)(JSRuntime *rt, JSClassID class_id, const JSClassDef *class_def)> WIN_JS_NewClass;
extern std::atomic<int (*)(JSRuntime *rt, JSClassID class_id)> WIN_JS_IsRegisteredClass;
extern std::atomic<JSValue (*)(JSContext *ctx, int64_t v)> WIN_JS_NewBigInt64;
extern std::atomic<JSValue (*)(JSContext *ctx, uint64_t v)> WIN_JS_NewBigUint64;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValue obj)> WIN_JS_Throw;
extern std::atomic<JSValue (*)(JSContext *ctx)> WIN_JS_GetException;
extern std::atomic<JS_BOOL (*)(JSContext *ctx, JSValueConst val)> WIN_JS_IsError;
extern std::atomic<void (*)(JSContext *ctx)> WIN_JS_ResetUncatchableError;
extern std::atomic<JSValue (*)(JSContext *ctx)> WIN_JS_NewError;
extern std::atomic<JSValue __js_printf_like(2, 3) (*)(JSContext *ctx, const char *fmt, ...)> WIN_JS_ThrowSyntaxError;
extern std::atomic<JSValue __js_printf_like(2, 3) (*)(JSContext *ctx, const char *fmt, ...)> WIN_JS_ThrowTypeError;
extern std::atomic<JSValue __js_printf_like(2, 3) (*)(JSContext *ctx, const char *fmt, ...)> WIN_JS_ThrowReferenceError;
extern std::atomic<JSValue __js_printf_like(2, 3) (*)(JSContext *ctx, const char *fmt, ...)> WIN_JS_ThrowRangeError;
extern std::atomic<JSValue __js_printf_like(2, 3) (*)(JSContext *ctx, const char *fmt, ...)> WIN_JS_ThrowInternalError;
extern std::atomic<JSValue (*)(JSContext *ctx)> WIN_JS_ThrowOutOfMemory;

extern std::atomic<void (*)(JSContext *ctx, JSValue v)> WIN___JS_FreeValue;
extern std::atomic<void (*)(JSRuntime *rt, JSValue v)> WIN___JS_FreeValueRT;

extern std::atomic<int (*)(JSContext *ctx, JSValueConst val)> WIN_JS_ToBool;
extern std::atomic<int (*)(JSContext *ctx, int32_t *pres, JSValueConst val)> WIN_JS_ToInt32;
extern std::atomic<int (*)(JSContext *ctx, int64_t *pres, JSValueConst val)> WIN_JS_ToInt64;
extern std::atomic<int (*)(JSContext *ctx, uint64_t *plen, JSValueConst val)> WIN_JS_ToIndex;
extern std::atomic<int (*)(JSContext *ctx, double *pres, JSValueConst val)> WIN_JS_ToFloat64;
extern std::atomic<int (*)(JSContext *ctx, int64_t *pres, JSValueConst val)> WIN_JS_ToBigInt64;
extern std::atomic<int (*)(JSContext *ctx, int64_t *pres, JSValueConst val)> WIN_JS_ToInt64Ext;
extern std::atomic<JSValue (*)(JSContext *ctx, const char *str1, size_t len1)> WIN_JS_NewStringLen;
extern std::atomic<JSValue (*)(JSContext *ctx, const char *str)> WIN_JS_NewString;
extern std::atomic<JSValue (*)(JSContext *ctx, const char *str)> WIN_JS_NewAtomString;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst val)> WIN_JS_ToString;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst val)> WIN_JS_ToPropertyKey;
extern std::atomic<const char *(*)(JSContext *ctx, size_t *plen, JSValueConst val1, JS_BOOL cesu8)> WIN_JS_ToCStringLen2;
extern std::atomic<void (*)(JSContext *ctx, const char *ptr)> WIN_JS_FreeCString;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst proto, JSClassID class_id)> WIN_JS_NewObjectProtoClass;
extern std::atomic<JSValue (*)(JSContext *ctx, int class_id)> WIN_JS_NewObjectClass;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst proto)> WIN_JS_NewObjectProto;
extern std::atomic<JSValue (*)(JSContext *ctx)> WIN_JS_NewObject;
extern std::atomic<JS_BOOL (*)(JSContext* ctx, JSValueConst val)> WIN_JS_IsFunction;
extern std::atomic<JS_BOOL (*)(JSContext* ctx, JSValueConst val)> WIN_JS_IsConstructor;
extern std::atomic<JS_BOOL (*)(JSContext *ctx, JSValueConst func_obj, JS_BOOL val)> WIN_JS_SetConstructorBit;
extern std::atomic<JSValue (*)(JSContext *ctx)> WIN_JS_NewArray;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst val)> WIN_JS_IsArray;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst obj,JSAtom prop, JSValueConst receiver,JS_BOOL throw_ref_error)> WIN_JS_GetPropertyInternal;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst this_obj,const char *prop)> WIN_JS_GetPropertyStr;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst this_obj,uint32_t idx)> WIN_JS_GetPropertyUint32;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj,JSAtom prop, JSValue val,int flags)> WIN_JS_SetPropertyInternal;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj,uint32_t idx, JSValue val)> WIN_JS_SetPropertyUint32;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj,int64_t idx, JSValue val)> WIN_JS_SetPropertyInt64;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj, const char *prop, JSValue val)> WIN_JS_SetPropertyStr;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj, JSAtom prop)> WIN_JS_HasProperty;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst obj)> WIN_JS_IsExtensible;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst obj)> WIN_JS_PreventExtensions;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst obj, JSAtom prop, int flags)> WIN_JS_DeleteProperty;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst obj, JSValueConst proto_val)> WIN_JS_SetPrototype;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst val)> WIN_JS_GetPrototype;
extern std::atomic<int (*)(JSContext *ctx, JSPropertyEnum **ptab, uint32_t *plen, JSValueConst obj, int flags)> WIN_JS_GetOwnPropertyNames;
extern std::atomic<int (*)(JSContext *ctx, JSPropertyDescriptor *desc, JSValueConst obj, JSAtom prop)> WIN_JS_GetOwnProperty;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst func_obj, JSValueConst this_obj, int argc, JSValueConst *argv)> WIN_JS_Call;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst this_val, JSAtom atom, int argc, JSValueConst *argv)> WIN_JS_Invoke;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst func_obj, int argc, JSValueConst *argv)> WIN_JS_CallConstructor;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst func_obj,JSValueConst new_target, int argc, JSValueConst *argv)> WIN_JS_CallConstructor2;
extern std::atomic<JS_BOOL (*)(const char *input, size_t input_len)> WIN_JS_DetectModule;
extern std::atomic<JSValue (*)(JSContext *ctx, const char *input, size_t input_len,const char *filename, int eval_flags)> WIN_JS_Eval;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst this_obj, const char *input, size_t input_len, const char *filename, int eval_flags)> WIN_JS_EvalThis;
extern std::atomic<JSValue (*)(JSContext *ctx)> WIN_JS_GetGlobalObject;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst val, JSValueConst obj)> WIN_JS_IsInstanceOf;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj, JSAtom prop, JSValueConst val, JSValueConst getter, JSValueConst setter, int flags)> WIN_JS_DefineProperty;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj,JSAtom prop, JSValue val, int flags)> WIN_JS_DefinePropertyValue;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj,uint32_t idx, JSValue val, int flags)> WIN_JS_DefinePropertyValueUint32;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj,  const char *prop, JSValue val, int flags)> WIN_JS_DefinePropertyValueStr;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst this_obj, JSAtom prop, JSValue getter, JSValue setter,int flags)> WIN_JS_DefinePropertyGetSet;
extern std::atomic<void (*)(JSValue obj, void *opaque)> WIN_JS_SetOpaque;
extern std::atomic<void *(*)(JSValueConst obj, JSClassID class_id)> WIN_JS_GetOpaque;
extern std::atomic<void *(*)(JSContext *ctx, JSValueConst obj, JSClassID class_id)> WIN_JS_GetOpaque2;
extern std::atomic<JSValue (*)(JSContext *ctx, const char *buf, size_t buf_len, const char *filename)> WIN_JS_ParseJSON;
extern std::atomic<JSValue (*)(JSContext *ctx, const char *buf, size_t buf_len, const char *filename, int flags)> WIN_JS_ParseJSON2;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst obj, JSValueConst replacer, JSValueConst space0)> WIN_JS_JSONStringify;
extern std::atomic<JSValue (*)(JSContext *ctx, uint8_t *buf, size_t len, JSFreeArrayBufferDataFunc *free_func, void *opaque, JS_BOOL is_shared)> WIN_JS_NewArrayBuffer;
extern std::atomic<JSValue (*)(JSContext *ctx, const uint8_t *buf, size_t len)> WIN_JS_NewArrayBufferCopy;
extern std::atomic<void (*)(JSContext *ctx, JSValueConst obj)> WIN_JS_DetachArrayBuffer;
extern std::atomic<uint8_t *(*)(JSContext *ctx, size_t *psize, JSValueConst obj)> WIN_JS_GetArrayBuffer;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValueConst obj, size_t *pbyte_offset, size_t *pbyte_length, size_t *pbytes_per_element)> WIN_JS_GetTypedArrayBuffer;
extern std::atomic<void (*)(JSRuntime *rt, const JSSharedArrayBufferFunctions *sf)> WIN_JS_SetSharedArrayBufferFunctions;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValue *resolving_funcs)> WIN_JS_NewPromiseCapability;
extern std::atomic<void (*)(JSRuntime *rt, JSHostPromiseRejectionTracker *cb, void *opaque)> WIN_JS_SetHostPromiseRejectionTracker;
extern std::atomic<void (*)(JSRuntime *rt, JSInterruptHandler *cb, void *opaque)> WIN_JS_SetInterruptHandler;
extern std::atomic<void (*)(JSRuntime *rt, JS_BOOL can_block)> WIN_JS_SetCanBlock;
extern std::atomic<void (*)(JSContext *ctx, JSValueConst obj)> WIN_JS_SetIsHTMLDDA;
extern std::atomic<void (*)(JSRuntime *rt, JSModuleNormalizeFunc *module_normalize, JSModuleLoaderFunc *module_loader, void *opaque)> WIN_JS_SetModuleLoaderFunc;
extern std::atomic<JSValue (*)(JSContext *ctx, JSModuleDef *m)> WIN_JS_GetImportMeta;
extern std::atomic<JSAtom (*)(JSContext *ctx, JSModuleDef *m)> WIN_JS_GetModuleName;
extern std::atomic<int (*)(JSContext *ctx, JSJobFunc *job_func, int argc, JSValueConst *argv)> WIN_JS_EnqueueJob;
extern std::atomic<JS_BOOL (*)(JSRuntime *rt)> WIN_JS_IsJobPending;
extern std::atomic<int (*)(JSRuntime *rt, JSContext **pctx)> WIN_JS_ExecutePendingJob;
extern std::atomic<uint8_t *(*)(JSContext *ctx, size_t *psize, JSValueConst obj, int flags)> WIN_JS_WriteObject;
extern std::atomic<uint8_t *(*)(JSContext *ctx, size_t *psize, JSValueConst obj, int flags, uint8_t ***psab_tab, size_t *psab_tab_len)> WIN_JS_WriteObject2;
extern std::atomic<JSValue (*)(JSContext *ctx, const uint8_t *buf, size_t buf_len, int flags)> WIN_JS_ReadObject;
extern std::atomic<JSValue (*)(JSContext *ctx, JSValue fun_obj)> WIN_JS_EvalFunction;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst obj)> WIN_JS_ResolveModule;
extern std::atomic<JSAtom (*)(JSContext *ctx, int n_stack_levels)> WIN_JS_GetScriptOrModuleName;
extern std::atomic<JSModuleDef *(*)(JSContext *ctx, const char *basename, const char *filename)> WIN_JS_RunModule;
extern std::atomic<JSValue (*)(JSContext *ctx, JSCFunction *func, const char *name,int length, JSCFunctionEnum cproto, int magic)> WIN_JS_NewCFunction2;
extern std::atomic<JSValue (*)(JSContext *ctx, JSCFunctionData *func, int length, int magic, int data_len,JSValueConst *data)> WIN_JS_NewCFunctionData;
extern std::atomic<void (*)(JSContext *ctx, JSValueConst func_obj, JSValueConst proto)> WIN_JS_SetConstructor;
extern std::atomic<void (*)(JSContext *ctx, JSValueConst obj,const JSCFunctionListEntry *tab,int len)> WIN_JS_SetPropertyFunctionList;
extern std::atomic<JSModuleDef *(*)(JSContext *ctx, const char *name_str,  JSModuleInitFunc *func)> WIN_JS_NewCModule;
extern std::atomic<int (*)(JSContext *ctx, JSModuleDef *m, const char *name_str)> WIN_JS_AddModuleExport;
extern std::atomic<int (*)(JSContext *ctx, JSModuleDef *m, const JSCFunctionListEntry *tab, int len)> WIN_JS_AddModuleExportList;
extern std::atomic<int (*)(JSContext *ctx, JSModuleDef *m, const char *export_name, JSValue val)> WIN_JS_SetModuleExport;
extern std::atomic<int (*)(JSContext *ctx, JSModuleDef *m, const JSCFunctionListEntry *tab, int len)> WIN_JS_SetModuleExportList;
extern std::atomic<JSModuleDef *(*)(JSContext *ctx, const char *module_name)> WIN_js_init_module_std;
extern std::atomic<JSModuleDef *(*)(JSContext *ctx, const char *module_name)> WIN_js_init_module_os;
extern std::atomic<void (*)(JSContext *ctx, int argc, char **argv)> WIN_js_std_add_helpers;
extern std::atomic<void (*)(JSContext *ctx)> WIN_js_std_loop;
extern std::atomic<void (*)(JSRuntime *rt)> WIN_js_std_init_handlers;
extern std::atomic<void (*)(JSRuntime *rt)> WIN_js_std_free_handlers;
extern std::atomic<void (*)(JSContext *ctx)> WIN_js_std_dump_error;
extern std::atomic<uint8_t *(*)(JSContext *ctx, size_t *pbuf_len, const char *filename)> WIN_js_load_file;
extern std::atomic<int (*)(JSContext *ctx, JSValueConst func_val, JS_BOOL use_realpath, JS_BOOL is_main)> WIN_js_module_set_import_meta;
extern std::atomic<JSModuleDef *(*)(JSContext *ctx, const char *module_name, void *opaque)> WIN_js_module_loader;
extern std::atomic<void (*)(JSContext *ctx, const uint8_t *buf, size_t buf_len, int flags)> WIN_js_std_eval_binary;
extern std::atomic<void (*)(JSContext *ctx, JSValueConst promise, JSValueConst reason, JS_BOOL is_handled, void *opaque)> WIN_js_std_promise_rejection_tracker;
extern std::atomic<void (*)(JSContext *(*func)(JSRuntime *rt))> WIN_js_std_set_worker_new_context_func;

extern "C"{
    void win_jsc_fn_init(const char* const path);
    int win_jsc_fn_free();
}


#endif

